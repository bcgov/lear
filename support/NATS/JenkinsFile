#!/usr/bin/env groovy
//
// Copyright © 2018 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

//JENKINS DEPLOY ENVIRONMENT VARIABLES:
// - JENKINS_JAVA_OVERRIDES  -Dhudson.model.DirectoryBrowserSupport.CSP= -Duser.timezone=America/Vancouver
//   -> user.timezone : set the local timezone so logfiles report correxct time
//   -> hudson.model.DirectoryBrowserSupport.CSP : removes restrictions on CSS file load, thus html pages of test reports are displayed pretty
//   See: https://docs.openshift.com/container-platform/3.9/using_images/other_images/jenkins.html for a complete list of JENKINS env vars

def TAG_NAME = dev
def COMPONENT_NAME = nats-streaming
def NAMESPACE = hak2zo


def SERVICE_POD
def USERNAME
def PASSWORD

node {
     stage("Deploy to ${TAG_NAME}") {
          script {
            openshift.withCluster() {
              openshift.withProject() {
    
                echo "Tagging ${COMPONENT_NAME} for deployment to ${TAG_NAME} ..."
    
                // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
                // Tag the images for deployment based on the image's hash
                def IMAGE_HASH = getImageTagHash("${COMPONENT_NAME}")
                echo "IMAGE_HASH: ${IMAGE_HASH}"
                openshift.tag("${COMPONENT_NAME}@${IMAGE_HASH}", "${COMPONENT_NAME}:${TAG_NAME}")
              }
    
              echo "Deployment Complete."
            }
          }
    } // end stage
    stage('Run NATS commands to use DB') {
        script {
            openshift.withCluster() {
                openshift.withProject("${NAMESPACE}-${TAG_NAME}") {   
                    SERVICE_POD = openshift.selector('pod', [app: "${COMPONENT_NAME}-${TAG_NAME}"])
                    
                    SERVICE_POD = openshift.selector('pod', [app: "${COMPONENT_NAME}-${TAG_NAME}"])
                    USERNAME = openshift.selector('configmaps', [app: "${COMPONENT_NAME}-${TAG_NAME}"])
                    PASSWORD = openshift.selector('configmaps', [app: "${COMPONENT_NAME}-${TAG_NAME}"])
                    
		    echo SERVICE_POD.objects()[0].metadata.name    
 		    
 		    try {
                        def install_reqs = openshift.exec(
                            SERVICE_POD.objects()[0].metadata.name,
                            '--',
                            "bash -c 'nats-streaming -m 8222 --store SQL --sql_driver postgres --sql_source postgres://nats-db?user=${USERNAME}&password=${PASSWORD}&sslmode=disable'"
                        )                        
                    } catch (Exception e) {
                        PASSED = false
                        def error_message = e.getMessage()
                        // send below to rocket chat
                        error_message = error_message.substring(0, error_message.lastIndexOf("\n"))
                        error_message_summary = error_message.substring(error_message.lastIndexOf("\n"))
                        echo """
                        Error details for ${COMPONENT_NAME}-${TAG_NAME}:
                            ${error_message}
                        Error result summary for ${COMPONENT_NAME}-${TAG_NAME}:
                            ${error_message_summary}
                        """
                    }                    

                }
            }
        }

    } // end stage
} // end node