[tool.poetry]
name = "business-emailer"
version = "0.1.0"
description = "This module is the service worker for sending emails about entity related events."
authors = ["Hrvoje Fekete <hrvoje.fekete@mindpoweredtech.com>"]
license = "BSD-3-Clause"
readme = "README.md"


[tool.poetry.dependencies]
python = "^3.13"
alembic = "1.15.2"
aniso8601 = "10.0.0"
arrow = "1.3.0"
attrs = "25.3.0"
Babel = "2.17.0"
blinker = "1.9.0"
cachelib = "0.13.0"
certifi = "2025.1.31"
chardet = "5.2.0"
charset-normalizer = "3.4.1"
click = "8.1.8"
datedelta = ">=1.4,<2.0"
dpath = "2.2.0"
ecdsa = "0.19.1"
Flask = "3.1.0"
Flask-Babel = "4.0.0"
Flask-Cors = "5.0.1"
flask-jwt-oidc = "0.8.0"
Flask-Moment = "1.0.6"
Flask-Pydantic = "0.12.0"
flask-restx = "1.3.0"
Flask-Script = "2.0.6"
Flask-SQLAlchemy = ">=3.1.1,<4.0.0"
flask-migrate = ">=4.1.0,<5.0.0"
fqdn = "1.5.1"
frozenlist = "1.5.0"
gunicorn = "23.0.0"
idna = "3.10"
importlib-resources = "6.5.2"
isoduration = "20.11.0"
itsdangerous = "2.2.0"
Jinja2 = "3.1.6"
jsonpointer = "3.0.0"
jsonschema = "4.23.0"
launchdarkly-server-sdk = "7.1.0"
Mako = "1.3.9"
MarkupSafe = "3.0.2"
minio = "7.2.15"
multidict = "6.2.0"
nest-asyncio = "1.6.0"
Pillow = "11.1.0"
pkgutil-resolve-name = "1.3.10"
protobuf = "==3.20.*"
psycopg2-binary = "2.9.10"
pyasn1 = "0.4.8"
pycountry = ">=24.6.1,<25.0.0"
pydantic = ">=2.10.6,<3.0.0"
PyPDF2 = "3.0.1"
pyRFC3339 = "2.0.1"
pyrsistent = "0.20.0"
python-dateutil = "2.9.0"
python-dotenv = "1.1.0"
python-editor = "1.0.4"
python-jose = "3.4.0"
pytz = "2025.1"
reportlab = "4.3.1"
requests = "2.32.3"
rfc3339-validator = "0.1.4"
rfc3987 = "1.3.8"
rsa = "4.9"
six = "1.17.0"
SQLAlchemy = "2.0.40"
SQLAlchemy-Continuum = "1.4.2"
SQLAlchemy-Utils = "0.41.2"
strict-rfc3339 = "0.7"
typing-extensions = "4.13.0"
uri-template = "1.3.0"
urllib3 = "2.3.0"
webcolors = "24.11.1"
Werkzeug = "3.1.3"
yarl = "1.18.3"
zipp = "3.19.1"
legacy-cgi = "^2.6.3"

# Git-based dependencies
gcp-queue = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/gcp-queue", branch = "main" }
structured-logging = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/structured-logging", branch = "main" }
business-model = { git = "https://github.com/bcgov/lear.git", subdirectory = "python/common/business-registry-model" }
business-registry-account = { git = "https://github.com/bcgov/lear.git", subdirectory = "python/common/business-registry-account" }
business-registry-common = { git = "https://github.com/bcgov/lear.git", subdirectory = "python/common/business-registry-common" }

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-cov = "6.1.0"
pytest-asyncio = "0.26.0"
pytest-mock = "^3.14.0"
requests-mock = "1.12.1"

[tool.poetry.group.dev.dependencies]
freezegun = "^1.5.1"
ruff = "^0.11.2"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".vscode",
    "dist",
    "htmlcov",
    ".venv",
    "migrations",
    "devops",
    ".history",
    "tests",
    "daily",
    "monthly"
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "Q", # flake8-quotes
    "I", # isort
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PL", # pyLint
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "F", # pyflakes
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "ERA", # do not autoremove commented out code
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = [
    "structured_logging",
    "flask_jwt_oidc",
    "business_emailer",
    "gcp_queue",
    "business_model",
    "business_account",
    "business_common"
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.extend-per-file-ignores]
"**/__init__.py" = ["F401"] # used for imports
"src/business_emailer/services/versioned_business_details.py" = [
    "I001", # ignoring 'unordered' imports
    "PLR2004" # ignoring magic value comparison in this file
]
"src/business_emailer/services/namex.py" = ["I001"]  # ignoring 'unordered' imports

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
