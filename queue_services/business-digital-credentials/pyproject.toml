[tool.poetry]
name = "business-digital-credentials"
version = "0.1.0"
description = "This module is the service worker for handling events that deal with Digital Business Card credential tasks."
authors = ["Lucas O'Neil <lucasoneil@gmail.com>"]
license = "BSD-3-Clause"
readme = "README.md"


[tool.poetry.dependencies]
python = "^3.13"
gunicorn = "23.0.0"
launchdarkly-server-sdk = "7.1.0"
psycopg2-binary = "2.9.10"
Flask = "^3.1.0"

# Git-based dependencies
gcp-queue = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/gcp-queue", branch = "main" }
structured-logging = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/structured-logging", branch = "main" }
business-model = {git = "https://github.com/bcgov/lear.git", subdirectory = "python/common/business-registry-model", branch = "main"}
business-registry-account = { git = "https://github.com/bcgov/lear.git", subdirectory = "python/common/business-registry-account", branch = "main" }
business-registry-common = { git = "https://github.com/bcgov/lear.git", subdirectory = "python/common/business-registry-common", branch = "main" }
business-registry-digital-credentials = {git = "https://github.com/bcgov/lear.git", subdirectory = "python/common/business-registry-digital-credentials", branch = "main"}



[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-cov = "6.1.0"
pytest-mock = "^3.14.0"
requests-mock = "1.12.1"

[tool.poetry.group.dev.dependencies]
freezegun = "^1.5.1"
ruff = "^0.11.2"
deptry = "^0.23.0"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".vscode",
    "dist",
    "htmlcov",
    ".venv",
    "migrations",
    "devops",
    ".history",
    "tests",
    "daily",
    "monthly"
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "Q", # flake8-quotes
    "I", # isort
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PL", # pyLint
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "F", # pyflakes
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "ERA", # do not autoremove commented out code
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = [
    "structured_logging",
    "flask_jwt_oidc",
    "business_digital_credentials",
    "gcp_queue",
    "business_model",
    "business_account",
    "business_common"
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.extend-per-file-ignores]
"**/__init__.py" = ["F401"] # used for imports

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
