// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";
import { group } from "k6";
import encoding from 'k6/encoding';

export let options = {
  // NB: stages used for ramp-up load testing
  stages: [
    // { duration: '5m', target: 10 }, // simulate ramp-up of traffic from 1 to 10 users over 5 minutes.
    // { duration: '5m', target: 10 }, // stay at 10 users for 5 minutes
    // { duration: '3m', target: 30 }, // ramp-up to 30 users over 3 minutes
    // { duration: '5m', target: 30 }, // stay at 30 users for 5 minutes
    // { duration: '3m', target: 50 }, // ramp-up to 50 users over 3 minutes (peak hour starts)
    // { duration: '10m', target: 50 }, // stay at 50 users for an amount of time (peak hour)
    // { duration: '3m', target: 30 }, // ramp-down to 30 users over 3 minutes (peak hour ends)
    // { duration: '5m', target: 30 }, // continue at 30 for additional 5 minutes
    // { duration: '3m', target: 10 }, // ramp-down to 10 users over 3 minutes
    // { duration: '3m', target: 10 }, // continue at 10 for additional 3 minutes
    // { duration: '5m', target: 0 }, // ramp-down to 0 users
  ],
  duration: '1m', // comment out when using stages
  vus: 2, // comment out when using stages
  thresholds: {
    http_req_failed: ['rate<0.01'],
    http_req_duration: ['p(95)<1000'],
  },
};

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    identifier: "1"
  },
  environment: {
    base_url: "https://legal-api-test.apps.silver.devops.gov.bc.ca",
    version: "api/v2",
    token: "",
    identifier: "FM0276213",
    kc_url: "",
    realm: "",
    refresh_token: "",
    token_expires: "",
    refresh_token_expires: "",
    client_id: "",
    client_secret: ""
  }
});

export default function() {
  group("auth", function() {
    postman[Request]({
      name: "authenticate",
      id: "001e502c-986c-4f7a-86b7-a9df20653e50",
      method: "POST",
      address: "{{kc_url}}/auth/realms/{{realm}}/protocol/openid-connect/token",
      data: "grant_type=client_credentials",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      post(response) {
        var jsonData = pm.response.json();
        pm.environment.set("token", jsonData.access_token);
        pm.environment.set("refresh_token", jsonData.refresh_token);

        pm.environment.set(
            "token_expires",
            Date.now() + jsonData.expires_in * 1000
        );
        pm.environment.set(
            "refresh_token_expires",
            Date.now() + jsonData.refresh_expires_in * 1000
        );
      },
      auth(config, Var) {
        const encodedAuth = encoding.b64encode(`${pm[Var]("client_id")}:${pm[Var]("client_secret")}`)
        config.headers.Authorization = `Basic ${encodedAuth}`
      }
    });
  });

  group("business info", function() {
    postman[Request]({
      name: "Get Business",
      id: "bead5f47-7e64-4826-967f-fef866a0db1e",
      method: "GET",
      address: "{{base_url}}/{{version}}/businesses/{{identifier}}",
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
      }
    });

    postman[Request]({
      name: "Get Tasks",
      id: "c680de0f-ae25-4e7a-8762-22673e17b146",
      method: "GET",
      address: "{{base_url}}/{{version}}/businesses/{{identifier}}/tasks",
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
      }
    });

    postman[Request]({
      name: "Get Filings",
      id: "3f069bbf-8c35-45e6-96e3-197a1fd7f9b1",
      method: "GET",
      address: "{{base_url}}/{{version}}/businesses/{{identifier}}/filings",
      headers: {
        Accept: "application/json",
        "Account-Id": "{{account_id}}"
      },
      post(response) {
        var jsonData = pm.response.json();

        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("should return JSON", function() {
          pm.response.to.have.header("Content-Type", "application/json");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var]("token")}`;
      }
    });
  });
}
