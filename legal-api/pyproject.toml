[project]
name = "legal-api"
version = "3.0.0"
description = ""
authors = [
    {name = "thor",email = "1042854+thorwolpert@users.noreply.github.com"}
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.9.22,<4"

dependencies = [
    "flask (==1.1.2)",
    "flask-jwt-oidc (==0.3.0)",
    "launchdarkly-server-sdk (>=9.10.0,<10.0.0)",
    "flask-babel (==2.0.0)",
    "flask-caching (==2.3.0)",
    "flask-cors (==3.0.10)",
    "flask-migrate (==2.7.0)",
    "flask-moment (==0.11.0)",
    "flask-pydantic (==0.8.0)",
    "flask-sqlalchemy (==2.5.1)",
    "flask-script (==2.0.6)",
    "gunicorn (>=23.0.0,<24.0.0)",
    "sqlalchemy-continuum (==1.3.13)",
    "sqlalchemy-utils (==0.37.8)",
    "sqlalchemy (==1.4.44)",
    "attrs (==23.1.0)",
    "certifi (==2020.12.5)",
    "croniter (==2.0.5)",
    "datedelta (==1.3)",
    "dpath (==2.0.1)",
    "jsonschema (==4.19.0)",
    "psycopg2-binary (==2.8.6)",
    "pyRFC3339 (==1.1)",
    "pycountry (==20.7.3)",
    "pydantic (==1.10.2)",
    "python-dateutil (==2.8.1)",
    "python-dotenv (==0.17.1)",
    "python-editor (==1.0.4)",
    "strict-rfc3339 (==0.7)",
    "minio (==7.0.2)",
    "PyPDF2 (==1.26.0)",
    "reportlab (==3.6.12)",
    "html-sanitizer (==2.4.1)",
    "lxml (==5.2.2)",

    "jinja2 (==2.11.3)",
    "markupsafe (==1.1.1)",
    "itsdangerous (==1.1.0)",
    "werkzeug (==1.0.0)",
    "blinker (==1.4)",
    "flask-restx (==0.3.0)",
    "pyjwt (==2.8.0)",
    
    "registry_schemas @ git+https://github.com/bcgov/business-schemas.git@2.18.50#egg=registry_schemas",
    "sql-versioning @ git+https://github.com/bcgov/lear.git@main#subdirectory=python/common/sql-versioning",
    "gcp-queue @ git+https://github.com/bcgov/sbc-connect-common.git@main#subdirectory=python/gcp-queue",
    "structured-logging @ git+https://github.com/bcgov/sbc-connect-common.git@main#subdirectory=python/structured-logging"
]

[tool.poetry]
packages = [{include = "legal_api", from = "src"}
           ]

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.4"
pytest = "^8.3.5"
freezegun = "^1.5.1"
testcontainers = "^4.10.0"
google-cloud-datastore = "^2.20.2"
hypothesis = "^6.131.0"
pytest-mock = "^3.14.0"
requests-mock = "^1.12.1"


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".vscode",
    "dist",
    "htmlcov",
    ".venv",
    "migrations",
    "devops",
    ".history",
    "tests"
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.13
# target-version = "py313"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "TID252",
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "Q",   # flake8-quotes
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PL",  # pyLint
    "PLR0913", # Too many arguments in function definition
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TID252", # relative imports
    "UP",  # pyupgrade
    "F", # pyflakes
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "ERA", # do not autoremove commented out code
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["flask_jwt_oidc", "structured_logging", "gcp_queue", "business_account"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.extend-per-file-ignores]
"**/__init__.py" = ["F401"]  # used for imports
"**/config.py" = ["T201"]  # allow print instead of logger in config

[tool.pytest.ini_options]
minversion = "2.0"
testpaths = [
   "tests",
]
## addopts = "--verbose --strict -p no:warnings --cov=src --cov-report html:htmlcov --cov-report xml:coverage.xml"
python_files = [
   "test*.py"
]
norecursedirs = [
   ".git", ".tox", "venv*", "requirements*", "build",
]
log_cli = true
log_cli_level = "1"
filterwarnings = [
   "ignore::UserWarning"
]
markers = [
   "slow",
   "serial",
]

[tool.coverage.run]
branch = true
source = [
   "src/legal_api",
]
omit = [
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]