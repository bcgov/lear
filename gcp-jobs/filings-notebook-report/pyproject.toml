[tool.poetry]
name = "filings-notebook-report"
version = "0.1.0"
description = ""
authors = ["BrandonSharratt <brandon@daxiom.com>"]
readme = "README.md"
packages = [{include = "notebookreport", from = "src"}]

[tool.poetry.dependencies]
python = "^3.13.0"
jupyter = "^1.1.1"
SQLAlchemy = "^2.0.40"
psycopg2-binary = "^2.9.10"
ipython-sql = "^0.5.0"
simplejson = "^3.20.1"
pandas = "^2.2.3"
matplotlib = "^3.10.1"
papermill = "^2.6.0"
schedule = "^1.2.2"
attrs = "^25.3.0"
future = "^1.0.0"
Jinja2 = "^3.1.6"
python-dateutil = "^2.9.0.post0"
pytz = "^2025.2"
importlib-metadata = "^8.6.1"
jsonschema = "^4.23.0"
more-itertools = "^10.6.0"
six = "^1.17.0"
pyrsistent = "^0.20.0"
zipp = "^3.21.0"
Flask = "^3.1.0"
MarkupSafe = "^3.0.2"
aws-sam-cli = "^1.135.0"
Click = "^8.1.8"
python-dotenv = "^1.1.0"
requests = "^2.32.3"
marshmallow = "^3.26.1"
Werkzeug = "^3.1.3"
certifi = "^2025.1.31"
urllib3 = "^2.3.0"
idna = "^3.10"
pg8000 = "^1.31.2"
structured-logging = {git = "https://github.com/bcgov/sbc-connect-common.git", rev = "main", subdirectory = "python/structured-logging"}
business-registry-account = {git = "https://github.com/bcgov/lear.git", subdirectory = "python/common/business-registry-account"}

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
freezegun = "^1.5.1"
business-model = {git = "https://github.com/bcgov/lear.git", subdirectory = "python/common/business-registry-model"}
flask_migrate = "^4.0.5"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.2"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".vscode",
    "dist",
    "htmlcov",
    ".venv",
    "migrations",
    "devops",
    ".history",
    "tests",
    "daily",
    "monthly"
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "Q",   # flake8-quotes
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PL",  # pyLint
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "F", # pyflakes
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "ERA", # do not autoremove commented out code
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["structured_logging", "business_registry_account"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.extend-per-file-ignores]
"**/__init__.py" = ["F401"]  # used for imports

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
