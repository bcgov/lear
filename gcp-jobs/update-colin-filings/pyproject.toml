[project]
name = "update-colin-filings"
version = "2.0.0"
description = ""
authors = [
    {name = "Kial Jinnah",email = "kialj876@gmail.com"}
]
license = {text = "BSD-3-Clause"}
readme = "README.md"
requires-python = ">=3.13,<4"
dependencies = [
    "flask (>=3.1.0,<4.0.0)",
    "python-dotenv (>=1.1.0,<2.0.0)",
    "structured-logging @ git+https://github.com/bcgov/sbc-connect-common.git@main#subdirectory=python/structured-logging",
    "business-registry-account @ git+https://github.com/bcgov/lear.git@main#subdirectory=python/common/business-registry-account",
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
requests-mock = "^1.12.1"


[tool.poetry.group.dev.dependencies]
ruff = "^0.11.5"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".vscode",
    "dist",
    "htmlcov",
    ".venv",
    "migrations",
    "devops",
    ".history",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "Q",   # flake8-quotes
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PL",  # pyLint
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "F", # pyflakes
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "ERA", # do not autoremove commented out code
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = [
    "update_colin_filings",
    "structured_logging",
    "business_account"
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.extend-per-file-ignores]
"**/__init__.py" = ["F401"]  # used for imports
"**/config.py" = ["T201"]  # allow print instead of logger in config

[tool.pytest.ini_options]
minversion = "2.0"
testpaths = [
   "tests",
]
addopts = "--verbose --strict -p no:warnings --cov=src --cov-report html:htmlcov --cov-report xml:coverage.xml"
python_files = [
   "test*.py"
]
norecursedirs = [
   ".git", ".tox", "venv*", "requirements*", "build",
]
log_cli = true
log_cli_level = "1"
filterwarnings = [
   "ignore::UserWarning"
]
markers = [
   "slow",
   "serial",
]

[tool.coverage.run]
branch = true
source = [
   "src/update_colin_filings",
]
omit = [
    "run_job.py",
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]
